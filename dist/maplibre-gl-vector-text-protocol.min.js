!function(g,I){"object"==typeof exports&&"undefined"!=typeof module?I(exports):"function"==typeof define&&define.amd?define(["exports"],I):I((g="undefined"!=typeof globalThis?globalThis:g||self).VectorTextProtocol={})}(this,(function(g){"use strict";"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;var I={exports:{}};!function(g,I){!function(g){function I(g){return new Function("d","return {"+g.map((function(g,I){return JSON.stringify(g)+": d["+I+"]"})).join(",")+"}")}function C(g,C){var A=I(g);return function(I,l){return C(A(I),l,g)}}function A(g){var I=Object.create(null),C=[];return g.forEach((function(g){for(var A in g)A in I||C.push(I[A]=A)})),C}function l(g){var l=new RegExp('["'+g+"\n]"),b=g.charCodeAt(0);function c(g,A){var l,b,c=o(g,(function(g,c){if(l)return l(g,c-1);b=g,l=A?C(g,A):I(g)}));return c.columns=b,c}function o(g,I){var C,A,l={},c={},o=[],Z=g.length,d=0,n=0;function G(){if(d>=Z)return c;if(A)return A=!1,l;var I,C=d;if(34===g.charCodeAt(C)){for(var o=C;o++<Z;)if(34===g.charCodeAt(o)){if(34!==g.charCodeAt(o+1))break;++o}return d=o+2,13===(I=g.charCodeAt(o+1))?(A=!0,10===g.charCodeAt(o+2)&&++d):10===I&&(A=!0),g.slice(C+1,o).replace(/""/g,'"')}for(;d<Z;){var n=1;if(10===(I=g.charCodeAt(d++)))A=!0;else if(13===I)A=!0,10===g.charCodeAt(d)&&(++d,++n);else if(I!==b)continue;return g.slice(C,d-n)}return g.slice(C)}for(;(C=G())!==c;){for(var s=[];C!==l&&C!==c;)s.push(C),C=G();I&&null==(s=I(s,n++))||o.push(s)}return o}function Z(I,C){return null==C&&(C=A(I)),[C.map(G).join(g)].concat(I.map((function(I){return C.map((function(g){return G(I[g])})).join(g)}))).join("\n")}function d(g){return g.map(n).join("\n")}function n(I){return I.map(G).join(g)}function G(g){return null==g?"":l.test(g+="")?'"'+g.replace(/\"/g,'""')+'"':g}return{parse:c,parseRows:o,format:Z,formatRows:d}}var b=l(","),c=b.parse,o=b.parseRows,Z=b.format,d=b.formatRows,n=l("\t"),G=n.parse,s=n.parseRows,e=n.format,t=n.formatRows;g.dsvFormat=l,g.csvParse=c,g.csvParseRows=o,g.csvFormat=Z,g.csvFormatRows=d,g.tsvParse=G,g.tsvParseRows=s,g.tsvFormat=e,g.tsvFormatRows=t,Object.defineProperty(g,"__esModule",{value:!0})}(I)}(0,I.exports);var C={exports:{}};function A(g,I){var C=l(g,I);return C.whole+"° "+(C.minutes?C.minutes+"' ":"")+(C.seconds?C.seconds+'" ':"")+C.dir}function l(g,I){var C=({lat:["N","S"],lon:["E","W"]}[I]||"")[g>=0?0:1],A=Math.abs(g),l=Math.floor(A),b=60*(A-l),c=Math.floor(b);return{whole:l,minutes:c,seconds:Math.floor(60*(b-c)),dir:C}}function b(g,I){if(I||(I="NSEW"),"string"!=typeof g)return null;var C=(g=g.toUpperCase()).match(/^[\s\,]*([NSEW])?\s*([\-|\—|\―]?[0-9.]+)[°º˚]?\s*(?:([0-9.]+)['’′‘]\s*)?(?:([0-9.]+)(?:''|"|”|″)\s*)?([NSEW])?/);if(!C)return null;var A,l=C[0];if(C[1]&&C[5]?(A=C[1],l=l.slice(0,-1)):A=C[1]||C[5],A&&-1===I.indexOf(A))return null;var b=C[2]?parseFloat(C[2]):0,c=C[3]?parseFloat(C[3])/60:0,o=C[4]?parseFloat(C[4])/3600:0,Z=b<0?-1:1;return"S"!==A&&"W"!==A||(Z*=-1),{val:(Math.abs(b)+c+o)*Z,dim:A,matched:l,remain:g.slice(l.length)}}C.exports=function(g,I){var C=b(g,I);return null===C?null:C.val},C.exports.pair=function(g,I){var C=b(g=g.trim(),I);if(!C)return null;var A=b(g=C.remain.trim(),I);if(!A||A.remain)return null;return C.dim?function(g,I,C){if("N"===C||"S"===C)return[g,I];if("W"===C||"E"===C)return[I,g]}(C.val,A.val,C.dim):[C.val,A.val]},C.exports.format=A,C.exports.formatPair=function(g){return A(g.lat,"lat")+" "+A(g.lon,"lon")},C.exports.coordToDMS=l;var c=I.exports,o=C.exports,Z=/(Lat)(itude)?/gi,d=/(L)(on|ng)(gitude)?/i;function n(g,I){var C,A,l;for(var b in g)(A=b.match(I))&&(!C||A[0].length/b.length>l)&&(l=A[0].length/b.length,C=b);return C}function G(g){return n(g,Z)}function s(g){return n(g,d)}function e(g){return"object"==typeof g?Object.keys(g).length:0}function t(g){var I=[];return[",",";","\t","|"].forEach((function(C){var A=c.dsvFormat(C).parse(g);if(A.length>=1){for(var l=e(A[0]),b=0;b<A.length;b++)if(e(A[b])!==l)return;I.push({delimiter:C,arity:Object.keys(A[0]).length})}})),I.length?I.sort((function(g,I){return I.arity-g.arity}))[0].delimiter:null}var m={isLon:function(g){return!!g.match(d)},isLat:function(g){return!!g.match(Z)},guessLatHeader:G,guessLonHeader:s,csv:c.csvParse,tsv:c.tsvParse,dsv:c,auto:function(g){var I=t(g);return I?function(g){return delete g.columns,g}(c.dsvFormat(I).parse(g)):null},csv2geojson:function(g,I,C){C||(C=I,I={}),I.delimiter=I.delimiter||",";var A=I.latfield||"",l=I.lonfield||"",b=I.crs||"",Z=[],d={type:"FeatureCollection",features:Z};if(""!==b&&(d.crs={type:"name",properties:{name:b}}),"auto"!==I.delimiter||"string"!=typeof g||(I.delimiter=t(g),I.delimiter)){var n=I.numericFields?I.numericFields.split(","):null,e="string"==typeof g?c.dsvFormat(I.delimiter).parse(g,(function(g){if(n)for(var I in g)n.includes(I)&&(g[I]=+g[I]);return g})):g;if(e.length){var m,B=[];if(A||(A=G(e[0])),l||(l=s(e[0])),!A||!l){for(m=0;m<e.length;m++)Z.push({type:"Feature",properties:e[m],geometry:null});C(B.length?B:null,d)}else{for(m=0;m<e.length;m++)if(void 0!==e[m][l]&&void 0!==e[m][A]){var i,W,J,a=e[m][l],u=e[m][A];(J=o(a,"EW"))&&(a=J),(J=o(u,"NS"))&&(u=J),i=parseFloat(a),W=parseFloat(u),isNaN(i)||isNaN(W)?B.push({message:"A row contained an invalid value for latitude or longitude",row:e[m],index:m}):(I.includeLatLon||(delete e[m][l],delete e[m][A]),Z.push({type:"Feature",properties:e[m],geometry:{type:"Point",coordinates:[parseFloat(i),parseFloat(W)]}}))}C(B.length?B:null,d)}}else C(null,d)}else C({type:"Error",message:"Could not autodetect delimiter"})},toLine:function(g){for(var I=g.features,C={type:"Feature",geometry:{type:"LineString",coordinates:[]}},A=0;A<I.length;A++)C.geometry.coordinates.push(I[A].geometry.coordinates);return C.properties=I.reduce((function(g,I){for(var C in I.properties)g[C]||(g[C]=[]),g[C].push(I.properties[C]);return g}),{}),{type:"FeatureCollection",features:[C]}},toPolygon:function(g){for(var I=g.features,C={type:"Feature",geometry:{type:"Polygon",coordinates:[[]]}},A=0;A<I.length;A++)C.geometry.coordinates[0].push(I[A].geometry.coordinates);return C.properties=I.reduce((function(g,I){for(var C in I.properties)g[C]||(g[C]=[]),g[C].push(I.properties[C]);return g}),{}),{type:"FeatureCollection",features:[C]}}};function B(g){return g}function i(g,I){var C=I.id,A=I.bbox,l=null==I.properties?{}:I.properties,b=function(g,I){var C=function(g){if(null==g)return B;var I,C,A=g.scale[0],l=g.scale[1],b=g.translate[0],c=g.translate[1];return function(g,o){o||(I=C=0);var Z=2,d=g.length,n=new Array(d);for(n[0]=(I+=g[0])*A+b,n[1]=(C+=g[1])*l+c;Z<d;)n[Z]=g[Z],++Z;return n}}(g.transform),A=g.arcs;function l(g,I){I.length&&I.pop();for(var l=A[g<0?~g:g],b=0,c=l.length;b<c;++b)I.push(C(l[b],b));g<0&&function(g,I){for(var C,A=g.length,l=A-I;l<--A;)C=g[l],g[l++]=g[A],g[A]=C}(I,c)}function b(g){return C(g)}function c(g){for(var I=[],C=0,A=g.length;C<A;++C)l(g[C],I);return I.length<2&&I.push(I[0]),I}function o(g){for(var I=c(g);I.length<4;)I.push(I[0]);return I}function Z(g){return g.map(o)}function d(g){var I,C=g.type;switch(C){case"GeometryCollection":return{type:C,geometries:g.geometries.map(d)};case"Point":I=b(g.coordinates);break;case"MultiPoint":I=g.coordinates.map(b);break;case"LineString":I=c(g.arcs);break;case"MultiLineString":I=g.arcs.map(c);break;case"Polygon":I=Z(g.arcs);break;case"MultiPolygon":I=g.arcs.map(Z);break;default:return null}return{type:C,coordinates:I}}return d(I)}(g,I);return null==C&&null==A?{type:"Feature",properties:l,geometry:b}:null==A?{type:"Feature",id:C,properties:l,geometry:b}:{type:"Feature",id:C,bbox:A,properties:l,geometry:b}}function W(g,I){return Array.from(g.getElementsByTagName(I))}function J(g){return"#"===g[0]?g:`#${g}`}function a(g){return g?.normalize(),g&&g.textContent||""}function u(g,I,C){const A=g.getElementsByTagName(I),l=A.length?A[0]:null;return l&&C&&C(l),l}function S(g,I,C){const A={};if(!g)return A;const l=g.getElementsByTagName(I),b=l.length?l[0]:null;return b&&C?C(b,A):A}function k(g,I,C){const A=a(u(g,I));return A&&C&&C(A)||{}}function V(g,I,C){const A=parseFloat(a(u(g,I)));if(!isNaN(A))return A&&C&&C(A)||{}}function y(g,I,C){const A=parseFloat(a(u(g,I)));if(!isNaN(A))return A&&C&&C(A),A}function h(g,I){const C={};for(const A of I)k(g,A,(g=>{C[A]=g}));return C}function K(g){return 1===g?.nodeType}function H(g){return S(g,"line",(g=>Object.assign({},k(g,"color",(g=>({stroke:`#${g}`}))),V(g,"opacity",(g=>({"stroke-opacity":g}))),V(g,"width",(g=>({"stroke-width":96*g/25.4}))))))}function p(g){let I=[];if(null===g)return I;for(const C of Array.from(g.childNodes)){if(!K(C))continue;const g=X(C.nodeName);if("gpxtpx:TrackPointExtension"===g)I=I.concat(p(C));else{const A=a(C);I.push([g,r(A)])}}return I}function X(g){return["heart","gpxtpx:hr","hr"].includes(g)?"heart":g}function r(g){const I=parseFloat(g);return isNaN(I)?g:I}function R(g){const I=[parseFloat(g.getAttribute("lon")||""),parseFloat(g.getAttribute("lat")||"")];if(isNaN(I[0])||isNaN(I[1]))return null;y(g,"ele",(g=>{I.push(g)}));const C=u(g,"time");return{coordinates:I,time:C?a(C):null,extendedValues:p(u(g,"extensions"))}}function Y(g){const I=h(g,["name","cmt","desc","type","time","keywords"]),C=Array.from(g.getElementsByTagNameNS("http://www.garmin.com/xmlschemas/GpxExtensions/v3","*"));for(const A of C)A.parentNode?.parentNode===g&&(I[A.tagName.replace(":","_")]=a(A));const A=W(g,"link");return A.length&&(I.links=A.map((g=>Object.assign({href:g.getAttribute("href")},h(g,["text","type"]))))),I}function w(g,I){const C=W(g,I),A=[],l=[],b={};for(let g=0;g<C.length;g++){const I=R(C[g]);if(I){A.push(I.coordinates),I.time&&l.push(I.time);for(const[A,l]of I.extendedValues){const I="heart"===A?A:A.replace("gpxtpx:","")+"s";b[I]||(b[I]=Array(C.length).fill(null)),b[I][g]=l}}}if(!(A.length<2))return{line:A,times:l,extendedValues:b}}function v(g){const I=w(g,"rtept");if(I)return{type:"Feature",properties:Object.assign({_gpxType:"rte"},Y(g),H(u(g,"extensions"))),geometry:{type:"LineString",coordinates:I.line}}}function N(g){const I=W(g,"trkseg"),C=[],A=[],l=[];for(const g of I){const I=w(g,"trkpt");I&&(l.push(I),I.times&&I.times.length&&A.push(I.times))}if(0===l.length)return null;const b=l.length>1,c=Object.assign({_gpxType:"trk"},Y(g),H(u(g,"extensions")),A.length?{coordinateProperties:{times:b?A:A[0]}}:{});for(const g of l){C.push(g.line),c.coordinateProperties||(c.coordinateProperties={});const I=c.coordinateProperties,A=Object.entries(g.extendedValues);for(let g=0;g<A.length;g++){const[C,c]=A[g];b?(I[C]||(I[C]=l.map((g=>new Array(g.line.length).fill(null)))),I[C][g]=c):I[C]=c}}return{type:"Feature",properties:c,geometry:b?{type:"MultiLineString",coordinates:C}:{type:"LineString",coordinates:C[0]}}}function F(g){const I=Object.assign(Y(g),h(g,["sym"])),C=R(g);return C?{type:"Feature",properties:I,geometry:{type:"Point",coordinates:C.coordinates}}:null}function*z(g){for(const I of W(g,"trk")){const g=N(I);g&&(yield g)}for(const I of W(g,"rte")){const g=v(I);g&&(yield g)}for(const I of W(g,"wpt")){const g=F(I);g&&(yield g)}}const Q=[["heartRate","heartRates"],["Cadence","cadences"],["Speed","speeds"],["Watts","watts"]],f=[["TotalTimeSeconds","totalTimeSeconds"],["DistanceMeters","distanceMeters"],["MaximumSpeed","maxSpeed"],["AverageHeartRateBpm","avgHeartRate"],["MaximumHeartRateBpm","maxHeartRate"],["AvgSpeed","avgSpeed"],["AvgWatts","avgWatts"],["MaxWatts","maxWatts"]];function x(g,I){const C=[];for(const[A,l]of I){let I=u(g,A);if(!I){const C=g.getElementsByTagNameNS("http://www.garmin.com/xmlschemas/ActivityExtension/v2",A);C.length&&(I=C[0])}const b=parseFloat(a(I));isNaN(b)||C.push([l,b])}return C}function L(g){const I=[y(g,"LongitudeDegrees"),y(g,"LatitudeDegrees")];if(void 0===I[0]||isNaN(I[0])||void 0===I[1]||isNaN(I[1]))return null;const C=u(g,"HeartRateBpm"),A=a(u(g,"Time"));return u(g,"AltitudeMeters",(g=>{const C=parseFloat(a(g));isNaN(C)||I.push(C)})),{coordinates:I,time:A||null,heartRate:C?parseFloat(a(C)):null,extensions:x(g,Q)}}function T(g){const I=W(g,"Trackpoint"),C=[],A=[],l=[];if(I.length<2)return null;const b={},c={extendedProperties:b};for(let g=0;g<I.length;g++){const c=L(I[g]);if(null===c)continue;C.push(c.coordinates);const{time:o,heartRate:Z,extensions:d}=c;o&&A.push(o),Z&&l.push(Z);for(const[C,A]of d)b[C]||(b[C]=Array(I.length).fill(null)),b[C][g]=A}return C.length<2?null:Object.assign(c,{line:C,times:A,heartRates:l})}function U(g){const I=W(g,"Track"),C=[],A=[],l=[],b=[];let c;const o=Object.assign(Object.fromEntries(x(g,f)),S(g,"Name",(g=>({name:a(g)}))));for(const g of I)c=T(g),c&&(C.push(c.line),c.times.length&&A.push(c.times),c.heartRates.length&&l.push(c.heartRates),b.push(c.extendedProperties));for(let g=0;g<b.length;g++){const A=b[g];for(const l in A)1===I.length?c&&(o[l]=c.extendedProperties[l]):(o[l]||(o[l]=C.map((g=>Array(g.length).fill(null)))),o[l][g]=A[l])}return 0===C.length?null:((A.length||l.length)&&(o.coordinateProperties=Object.assign(A.length?{times:1===C.length?A[0]:A}:{},l.length?{heart:1===C.length?l[0]:l}:{})),{type:"Feature",properties:o,geometry:1===C.length?{type:"LineString",coordinates:C[0]}:{type:"MultiLineString",coordinates:C}})}function*O(g){for(const I of W(g,"Lap")){const g=U(I);g&&(yield g)}for(const I of W(g,"Courses")){const g=U(I);g&&(yield g)}}function j(g,I){const C={},A="stroke"==I||"fill"===I?I:I+"-color";return"#"===g[0]&&(g=g.substring(1)),6===g.length||3===g.length?C[A]="#"+g:8===g.length&&(C[I+"-opacity"]=parseInt(g.substring(0,2),16)/255,C[A]="#"+g.substring(6,8)+g.substring(4,6)+g.substring(2,4)),C}function M(g,I,C){const A={};return y(g,I,(g=>{A[C]=g})),A}function D(g,I){return S(g,"color",(g=>j(a(g),I)))}function P(g){return Object.assign({},function(g){return S(g,"PolyStyle",((g,I)=>Object.assign(I,S(g,"color",(g=>j(a(g),"fill"))),k(g,"fill",(g=>{if("0"===g)return{"fill-opacity":0}})),k(g,"outline",(g=>{if("0"===g)return{"stroke-opacity":0}})))))}(g),function(g){return S(g,"LineStyle",(g=>Object.assign(D(g,"stroke"),M(g,"width","stroke-width"))))}(g),function(g){return S(g,"LabelStyle",(g=>Object.assign(D(g,"label"),M(g,"scale","label-scale"))))}(g),function(g){return S(g,"IconStyle",(g=>Object.assign(D(g,"icon"),M(g,"scale","icon-scale"),M(g,"heading","icon-heading"),S(g,"hotSpot",(g=>{const I=parseFloat(g.getAttribute("x")||""),C=parseFloat(g.getAttribute("y")||""),A=g.getAttribute("xunits")||"",l=g.getAttribute("yunits")||"";return isNaN(I)||isNaN(C)?{}:{"icon-offset":[I,C],"icon-offset-units":[A,l]}})),S(g,"Icon",((g,I)=>(k(g,"href",(g=>{I.icon=g})),I))))))}(g))}const E=/\s*/g,q=/^\s*|\s*$/g,_=/\s+/;function $(g){return g.replace(E,"").split(",").map(parseFloat).filter((g=>!isNaN(g))).slice(0,3)}function gg(g){return g.replace(q,"").split(_).map($).filter((g=>g.length>=2))}function Ig(g){let I=W(g,"coord");0===I.length&&(I=function(g,I,C){return Array.from(g.getElementsByTagNameNS(C,I))}(g,"coord","*"));const C=I.map((g=>a(g).split(" ").map(parseFloat)));return 0===C.length?null:{geometry:C.length>2?{type:"LineString",coordinates:C}:{type:"Point",coordinates:C[0]},times:W(g,"when").map((g=>a(g)))}}function Cg(g){if(0===g.length)return g;const I=g[0],C=g[g.length-1];let A=!0;for(let g=0;g<Math.max(I.length,C.length);g++)if(I[g]!==C[g]){A=!1;break}return A?g:g.concat([g[0]])}const Ag=["Polygon","LineString","Point","Track","gx:Track"];function lg(g){return a(u(g,"coordinates"))}function bg(g){const I=[],C=[];for(const I of["MultiGeometry","MultiTrack","gx:MultiTrack"]){const C=u(g,I);if(C)return bg(C)}for(const A of Ag)for(const l of W(g,A))switch(A){case"Point":{const g=$(lg(l));g.length>=2&&I.push({type:"Point",coordinates:g});break}case"LineString":{const g=gg(lg(l));g.length>=2&&I.push({type:"LineString",coordinates:g});break}case"Polygon":{const g=[];for(const I of W(l,"LinearRing")){const C=Cg(gg(lg(I)));C.length>=4&&g.push(C)}g.length&&I.push({type:"Polygon",coordinates:g});break}case"Track":case"gx:Track":{const g=Ig(l);if(!g)break;const{times:A,geometry:b}=g;I.push(b),A.length&&C.push(A);break}}return{geometries:I,coordTimes:C}}function cg(g){return S(g,"ExtendedData",((g,I)=>{for(const C of W(g,"Data"))I[C.getAttribute("name")||""]=a(u(C,"value"));for(const C of W(g,"SimpleData"))I[C.getAttribute("name")||""]=a(C);return I}))}function og(g){return 0===g.length?null:1===g.length?g[0]:{type:"GeometryCollection",geometries:g}}function Zg(g){return S(g,"TimeSpan",(g=>({timespan:{begin:a(u(g,"begin")),end:a(u(g,"end"))}})))}function dg(g){return S(g,"TimeStamp",(g=>({timestamp:a(u(g,"when"))})))}function ng(g,I){return k(g,"styleUrl",(g=>(g=J(g),I[g]?Object.assign({styleUrl:g},I[g]):{styleUrl:g})))}function Gg(g){const I=u(g,"description");for(const g of Array.from(I?.childNodes||[]))if(4===g.nodeType)return{description:{"@type":"html",value:a(g)}};return{}}function sg(g,I){const{coordTimes:C,geometries:A}=bg(g),l={type:"Feature",geometry:og(A),properties:Object.assign(h(g,["name","address","visibility","open","phoneNumber","description"]),Gg(g),ng(g,I),P(g),cg(g),Zg(g),dg(g),C.length?{coordinateProperties:{times:1===C.length?C[0]:C}}:{})},b=g.getAttribute("id");return null!==b&&""!==b&&(l.id=b),l}function eg(g){let I=g.getAttribute("id");const C=g.parentNode;return!I&&K(C)&&"CascadingStyle"===C.localName&&(I=C.getAttribute("kml:id")||C.getAttribute("id")),J(I||"")}function tg(g){const I={};for(const C of W(g,"Style"))I[eg(C)]=P(C);for(const C of W(g,"StyleMap")){const g=J(C.getAttribute("id")||"");k(C,"styleUrl",(C=>{C=J(C),I[C]&&(I[g]=I[C])}))}return I}const mg=["name","visibility","open","address","description","phoneNumber","visibility"];function*Bg(g){const I=tg(g);for(const C of W(g,"Placemark")){const g=sg(C,I);g&&(yield g)}}var ig=Object.freeze({__proto__:null,gpx:function(g){return{type:"FeatureCollection",features:Array.from(z(g))}},gpxGen:z,kml:function(g){return{type:"FeatureCollection",features:Array.from(Bg(g))}},kmlGen:Bg,kmlWithFolders:function(g){const I=tg(g),C={type:"root",children:[]};return function g(C,A){if(K(C))switch(C.tagName){case"Placemark":{const g=sg(C,I);g&&A.children.push(g);break}case"Folder":{const g=function(g){const I={};for(const C of Array.from(g.childNodes))K(C)&&mg.includes(C.tagName)&&(I[C.tagName]=a(C));return{type:"folder",meta:I,children:[]}}(C);A.children.push(g),A=g;break}}if(C.childNodes)for(let I=0;I<C.childNodes.length;I++)g(C.childNodes[I],A)}(g,C),C},tcx:function(g){return{type:"FeatureCollection",features:Array.from(O(g))}},tcxGen:O});const Wg=["topojson","kml","gpx","tcx","csv","tsv"];class Jg{constructor(g,I){this.blankGeoJSON=()=>({type:"FeatureCollection",features:[]}),this._rawData=I,this._format=g;const C={topojson:this.loadTopoJson,kml:this.loadXml,gpx:this.loadXml,tcx:this.loadXml,csv:this.loadCsv,tsv:this.loadCsv};this._conversionFn=C[g]}async convert(){return this._conversionFn?this._conversionFn():new Promise(((g,I)=>I(`No converter exists for ${this._format}`)))}async loadXml(){return ig[this._format]((new DOMParser).parseFromString(this._rawData,"text/xml"))}async loadCsv(){let g=this.blankGeoJSON(),I={};return"tsv"===this._format&&(I.delimiter="\t"),g=await new Promise(((g,C)=>{m.csv2geojson(this._rawData,I,((I,A)=>I?C(I):g(A)))})),g}async loadTopoJson(){let g={};try{g=JSON.parse(this._rawData)}catch(g){throw"Invalid TopoJson"}let I=this.blankGeoJSON();return"Topology"===g.type&&void 0!==g.objects&&(I={type:"FeatureCollection",features:I.features=Object.keys(g.objects).map((I=>{return C=g,"string"==typeof(A=I)&&(A=C.objects[A]),"GeometryCollection"===A.type?{type:"FeatureCollection",features:A.geometries.map((function(g){return i(C,g)}))}:i(C,A);var C,A})).reduce(((g,I)=>[...g,...I.features]),[])}),I}}var ag=null;try{var ug="undefined"!=typeof module&&"function"==typeof module.require&&module.require("worker_threads")||"function"==typeof __non_webpack_require__&&__non_webpack_require__("worker_threads")||"function"==typeof require&&require("worker_threads");ag=ug.Worker}catch(g){}function Sg(g,I,C){var A=void 0===I?null:I,l=function(g,I){return Buffer.from(g,"base64").toString(I?"utf16":"utf8")}(g,void 0!==C&&C),b=l.indexOf("\n",10)+1,c=l.substring(b)+(A?"//# sourceMappingURL="+A:"");return function(g){return new ag(c,Object.assign({},g,{eval:!0}))}}function kg(g,I,C){var A=void 0===I?null:I,l=function(g,I){var C=atob(g);if(I){for(var A=new Uint8Array(C.length),l=0,b=C.length;l<b;++l)A[l]=C.charCodeAt(l);return String.fromCharCode.apply(null,new Uint16Array(A.buffer))}return C}(g,void 0!==C&&C),b=l.indexOf("\n",10)+1,c=l.substring(b)+(A?"//# sourceMappingURL="+A:""),o=new Blob([c],{type:"application/javascript"});return URL.createObjectURL(o)}var Vg="[object process]"===Object.prototype.toString.call("undefined"!=typeof process?process:0);var yg,hg,Kg,Hg=(yg="",hg=null,Kg=!1,Vg?Sg(yg,hg,Kg):function(g,I,C){var A;return function(l){return A=A||kg(g,I,C),new Worker(A,l)}}(yg,hg,Kg));const pg=()=>Math.random().toString(36).substring(2);class Xg{constructor(g,I){this.initId=pg()+"-"+g,this.worker=new Hg,this.handlers=new Map,this.worker.onmessage=g=>{const I=g.data,C=this.handlers.get(I.id),A=this;if(C){if("response"===I.type&&C.res(I.message),"error"===I.type){const g=I.error||new Error(`Unknown error with ${this.subClass}`);C.rej(g)}"init_response"===I.type&&(this._=Object.keys(I.message).map((g=>{const C=typeof I.message[g];return[g,function(){return C?A.exec(g)(...arguments):A.get(g)}]})).reduce(((g,I)=>({...g,[I[0]]:I[1]})),{}),C.res(this._))}},this.worker.postMessage({type:"init",id:this.initId,command:g,message:I})}onLoad(){return new Promise((g=>{void 0===this._?this.handlers.set(this.initId,{res:g,rej:g}):g(this._)}))}exec(g){const I=this;return function(){return new Promise(((C,A)=>{const l=pg()+"-"+g;I.handlers.set(l,{res:C,rej:A}),I.worker.postMessage({type:"exec",id:l,command:g,message:[...arguments]})}))}}get(g){return new Promise(((I,C)=>{const A=pg()+"-"+g;this.handlers.set(A,{res:I,rej:C}),this.worker.postMessage({type:"get",id:A,command:g,message:[]})}))}}const rg="test://http://example.com"!==new URL("test://http://example.com").href,Rg=(g,I)=>{const C=new AbortController,A=g.url.split("://")[0],l=g.url.replace(new RegExp(`^${A}://`),""),b=rg?(g=>{const I=new RegExp("^(https?)(//)");return g.replace(I,"$1:$2")})(l):l;return b&&fetch(b,{signal:C.signal}).then((g=>{200==g.status?g.text().then((g=>{let C,l;["kml","tcx","gpx"].indexOf(A)>=0||!(()=>{let g=!1;try{g="function"==typeof window.Worker}catch(I){g=!1}return g})()?(C=new Jg(A,g),l=C.convert()):(C=new Xg("Converter",[A,g]),l=C.exec("convert")()),l.then((g=>{I(null,g,null,null)})).catch((g=>{I(g)}))})):I(new Error(`Data fetch error: ${g.statusText}`))})).catch((g=>{I(new Error(g))})),{cancel:()=>{C.abort()}}};g.VectorTextProtocol=Rg,g.addProtocols=g=>{Wg.forEach((I=>{g.addProtocol(I,Rg)}))},Object.defineProperty(g,"__esModule",{value:!0})}));
//# sourceMappingURL=maplibre-gl-vector-text-protocol.min.js.map
