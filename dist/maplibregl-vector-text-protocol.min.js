!function(g,I){"object"==typeof exports&&"undefined"!=typeof module?I(exports):"function"==typeof define&&define.amd?define(["exports"],I):I((g="undefined"!=typeof globalThis?globalThis:g||self).VectorTextProtocol={})}(this,(function(g){"use strict";function I(g,I){return I.forEach((function(I){I&&"string"!=typeof I&&!Array.isArray(I)&&Object.keys(I).forEach((function(C){if("default"!==C&&!(C in g)){var A=Object.getOwnPropertyDescriptor(I,C);Object.defineProperty(g,C,A.get?A:{enumerable:!0,get:function(){return I[C]}})}}))})),Object.freeze(g)}"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;var C={exports:{}};!function(g,I){!function(g){function I(g){return new Function("d","return {"+g.map((function(g,I){return JSON.stringify(g)+": d["+I+"]"})).join(",")+"}")}function C(g,C){var A=I(g);return function(I,l){return C(A(I),l,g)}}function A(g){var I=Object.create(null),C=[];return g.forEach((function(g){for(var A in g)A in I||C.push(I[A]=A)})),C}function l(g){var l=new RegExp('["'+g+"\n]"),b=g.charCodeAt(0);function c(g,A){var l,b,c=Z(g,(function(g,c){if(l)return l(g,c-1);b=g,l=A?C(g,A):I(g)}));return c.columns=b,c}function Z(g,I){var C,A,l={},c={},Z=[],o=g.length,d=0,e=0;function G(){if(d>=o)return c;if(A)return A=!1,l;var I,C=d;if(34===g.charCodeAt(C)){for(var Z=C;Z++<o;)if(34===g.charCodeAt(Z)){if(34!==g.charCodeAt(Z+1))break;++Z}return d=Z+2,13===(I=g.charCodeAt(Z+1))?(A=!0,10===g.charCodeAt(Z+2)&&++d):10===I&&(A=!0),g.slice(C+1,Z).replace(/""/g,'"')}for(;d<o;){var e=1;if(10===(I=g.charCodeAt(d++)))A=!0;else if(13===I)A=!0,10===g.charCodeAt(d)&&(++d,++e);else if(I!==b)continue;return g.slice(C,d-e)}return g.slice(C)}for(;(C=G())!==c;){for(var t=[];C!==l&&C!==c;)t.push(C),C=G();I&&null==(t=I(t,e++))||Z.push(t)}return Z}function o(I,C){return null==C&&(C=A(I)),[C.map(G).join(g)].concat(I.map((function(I){return C.map((function(g){return G(I[g])})).join(g)}))).join("\n")}function d(g){return g.map(e).join("\n")}function e(I){return I.map(G).join(g)}function G(g){return null==g?"":l.test(g+="")?'"'+g.replace(/\"/g,'""')+'"':g}return{parse:c,parseRows:Z,format:o,formatRows:d}}var b=l(","),c=b.parse,Z=b.parseRows,o=b.format,d=b.formatRows,e=l("\t"),G=e.parse,t=e.parseRows,s=e.format,n=e.formatRows;g.dsvFormat=l,g.csvParse=c,g.csvParseRows=Z,g.csvFormat=o,g.csvFormatRows=d,g.tsvParse=G,g.tsvParseRows=t,g.tsvFormat=s,g.tsvFormatRows=n,Object.defineProperty(g,"__esModule",{value:!0})}(I)}(0,C.exports);var A={exports:{}};function l(g,I){var C=b(g,I);return C.whole+"° "+(C.minutes?C.minutes+"' ":"")+(C.seconds?C.seconds+'" ':"")+C.dir}function b(g,I){var C=({lat:["N","S"],lon:["E","W"]}[I]||"")[g>=0?0:1],A=Math.abs(g),l=Math.floor(A),b=60*(A-l),c=Math.floor(b);return{whole:l,minutes:c,seconds:Math.floor(60*(b-c)),dir:C}}function c(g,I){if(I||(I="NSEW"),"string"!=typeof g)return null;var C=(g=g.toUpperCase()).match(/^[\s\,]*([NSEW])?\s*([\-|\—|\―]?[0-9.]+)[°º˚]?\s*(?:([0-9.]+)['’′‘]\s*)?(?:([0-9.]+)(?:''|"|”|″)\s*)?([NSEW])?/);if(!C)return null;var A,l=C[0];if(C[1]&&C[5]?(A=C[1],l=l.slice(0,-1)):A=C[1]||C[5],A&&-1===I.indexOf(A))return null;var b=C[2]?parseFloat(C[2]):0,c=C[3]?parseFloat(C[3])/60:0,Z=C[4]?parseFloat(C[4])/3600:0,o=b<0?-1:1;return"S"!==A&&"W"!==A||(o*=-1),{val:(Math.abs(b)+c+Z)*o,dim:A,matched:l,remain:g.slice(l.length)}}A.exports=function(g,I){var C=c(g,I);return null===C?null:C.val},A.exports.pair=function(g,I){var C=c(g=g.trim(),I);if(!C)return null;var A=c(g=C.remain.trim(),I);if(!A||A.remain)return null;return C.dim?function(g,I,C){if("N"===C||"S"===C)return[g,I];if("W"===C||"E"===C)return[I,g]}(C.val,A.val,C.dim):[C.val,A.val]},A.exports.format=l,A.exports.formatPair=function(g){return l(g.lat,"lat")+" "+l(g.lon,"lon")},A.exports.coordToDMS=b;var Z=C.exports,o=A.exports,d=/(Lat)(itude)?/gi,e=/(L)(on|ng)(gitude)?/i;function G(g,I){var C,A,l;for(var b in g)(A=b.match(I))&&(!C||A[0].length/b.length>l)&&(l=A[0].length/b.length,C=b);return C}function t(g){return G(g,d)}function s(g){return G(g,e)}function n(g){return"object"==typeof g?Object.keys(g).length:0}function m(g){var I=[];return[",",";","\t","|"].forEach((function(C){var A=Z.dsvFormat(C).parse(g);if(A.length>=1){for(var l=n(A[0]),b=0;b<A.length;b++)if(n(A[b])!==l)return;I.push({delimiter:C,arity:Object.keys(A[0]).length})}})),I.length?I.sort((function(g,I){return I.arity-g.arity}))[0].delimiter:null}var W={isLon:function(g){return!!g.match(e)},isLat:function(g){return!!g.match(d)},guessLatHeader:t,guessLonHeader:s,csv:Z.csvParse,tsv:Z.tsvParse,dsv:Z,auto:function(g){var I=m(g);return I?function(g){return delete g.columns,g}(Z.dsvFormat(I).parse(g)):null},csv2geojson:function(g,I,C){C||(C=I,I={}),I.delimiter=I.delimiter||",";var A=I.latfield||"",l=I.lonfield||"",b=I.crs||"",c=[],d={type:"FeatureCollection",features:c};if(""!==b&&(d.crs={type:"name",properties:{name:b}}),"auto"!==I.delimiter||"string"!=typeof g||(I.delimiter=m(g),I.delimiter)){var e=I.numericFields?I.numericFields.split(","):null,G="string"==typeof g?Z.dsvFormat(I.delimiter).parse(g,(function(g){if(e)for(var I in g)e.includes(I)&&(g[I]=+g[I]);return g})):g;if(G.length){var n,W=[];if(A||(A=t(G[0])),l||(l=s(G[0])),!A||!l){for(n=0;n<G.length;n++)c.push({type:"Feature",properties:G[n],geometry:null});C(W.length?W:null,d)}else{for(n=0;n<G.length;n++)if(void 0!==G[n][l]&&void 0!==G[n][A]){var B,i,a,V=G[n][l],y=G[n][A];(a=o(V,"EW"))&&(V=a),(a=o(y,"NS"))&&(y=a),B=parseFloat(V),i=parseFloat(y),isNaN(B)||isNaN(i)?W.push({message:"A row contained an invalid value for latitude or longitude",row:G[n],index:n}):(I.includeLatLon||(delete G[n][l],delete G[n][A]),c.push({type:"Feature",properties:G[n],geometry:{type:"Point",coordinates:[parseFloat(B),parseFloat(i)]}}))}C(W.length?W:null,d)}}else C(null,d)}else C({type:"Error",message:"Could not autodetect delimiter"})},toLine:function(g){for(var I=g.features,C={type:"Feature",geometry:{type:"LineString",coordinates:[]}},A=0;A<I.length;A++)C.geometry.coordinates.push(I[A].geometry.coordinates);return C.properties=I.reduce((function(g,I){for(var C in I.properties)g[C]||(g[C]=[]),g[C].push(I.properties[C]);return g}),{}),{type:"FeatureCollection",features:[C]}},toPolygon:function(g){for(var I=g.features,C={type:"Feature",geometry:{type:"Polygon",coordinates:[[]]}},A=0;A<I.length;A++)C.geometry.coordinates[0].push(I[A].geometry.coordinates);return C.properties=I.reduce((function(g,I){for(var C in I.properties)g[C]||(g[C]=[]),g[C].push(I.properties[C]);return g}),{}),{type:"FeatureCollection",features:[C]}}};function B(g){return g}function i(g,I){var C=I.id,A=I.bbox,l=null==I.properties?{}:I.properties,b=function(g,I){var C=function(g){if(null==g)return B;var I,C,A=g.scale[0],l=g.scale[1],b=g.translate[0],c=g.translate[1];return function(g,Z){Z||(I=C=0);var o=2,d=g.length,e=new Array(d);for(e[0]=(I+=g[0])*A+b,e[1]=(C+=g[1])*l+c;o<d;)e[o]=g[o],++o;return e}}(g.transform),A=g.arcs;function l(g,I){I.length&&I.pop();for(var l=A[g<0?~g:g],b=0,c=l.length;b<c;++b)I.push(C(l[b],b));g<0&&function(g,I){for(var C,A=g.length,l=A-I;l<--A;)C=g[l],g[l++]=g[A],g[A]=C}(I,c)}function b(g){return C(g)}function c(g){for(var I=[],C=0,A=g.length;C<A;++C)l(g[C],I);return I.length<2&&I.push(I[0]),I}function Z(g){for(var I=c(g);I.length<4;)I.push(I[0]);return I}function o(g){return g.map(Z)}function d(g){var I,C=g.type;switch(C){case"GeometryCollection":return{type:C,geometries:g.geometries.map(d)};case"Point":I=b(g.coordinates);break;case"MultiPoint":I=g.coordinates.map(b);break;case"LineString":I=c(g.arcs);break;case"MultiLineString":I=g.arcs.map(c);break;case"Polygon":I=o(g.arcs);break;case"MultiPolygon":I=g.arcs.map(o);break;default:return null}return{type:C,coordinates:I}}return d(I)}(g,I);return null==C&&null==A?{type:"Feature",properties:l,geometry:b}:null==A?{type:"Feature",id:C,properties:l,geometry:b}:{type:"Feature",id:C,bbox:A,properties:l,geometry:b}}var a={};function V(g){return g&&g.normalize&&g.normalize(),g&&g.textContent||""}function y(g,I){const C=g.getElementsByTagName(I);return C.length?C[0]:null}function J(g){const I={};if(g){const C=y(g,"line");if(C){const g=V(y(C,"color")),A=parseFloat(V(y(C,"opacity"))),l=parseFloat(V(y(C,"width")));g&&(I.stroke=g),isNaN(A)||(I["stroke-opacity"]=A),isNaN(l)||(I["stroke-width"]=96*l/25.4)}}return I}function S(g,I){const C={};let A,l;for(l=0;l<I.length;l++)A=y(g,I[l]),A&&(C[I[l]]=V(A));return C}function u(g){const I=S(g,["name","cmt","desc","type","time","keywords"]),C=g.getElementsByTagNameNS("http://www.garmin.com/xmlschemas/GpxExtensions/v3","*");for(let A=0;A<C.length;A++){const l=C[A];l.parentNode.parentNode===g&&(I[l.tagName.replace(":","_")]=V(l))}const A=g.getElementsByTagName("link");A.length&&(I.links=[]);for(let g=0;g<A.length;g++)I.links.push(Object.assign({href:A[g].getAttribute("href")},S(A[g],["text","type"])));return I}function k(g){const I=[parseFloat(g.getAttribute("lon")),parseFloat(g.getAttribute("lat"))],C=y(g,"ele"),A=y(g,"gpxtpx:hr")||y(g,"hr"),l=y(g,"time");let b;C&&(b=parseFloat(V(C)),isNaN(b)||I.push(b));const c={coordinates:I,time:l?V(l):null,extendedValues:[]};A&&c.extendedValues.push(["heart",parseFloat(V(A))]);const Z=y(g,"extensions");if(null!==Z)for(const g of["speed","course","hAcc","vAcc"]){const I=parseFloat(V(y(Z,g)));isNaN(I)||c.extendedValues.push([g,I])}return c}function H(g){const I=p(g,"rtept");if(I)return{type:"Feature",properties:Object.assign(u(g),J(y(g,"extensions")),{_gpxType:"rte"}),geometry:{type:"LineString",coordinates:I.line}}}function p(g,I){const C=g.getElementsByTagName(I);if(C.length<2)return;const A=[],l=[],b={};for(let g=0;g<C.length;g++){const I=k(C[g]);A.push(I.coordinates),I.time&&l.push(I.time);for(let A=0;A<I.extendedValues.length;A++){const[l,c]=I.extendedValues[A],Z="heart"===l?l:l+"s";b[Z]||(b[Z]=Array(C.length).fill(null)),b[Z][g]=c}}return{line:A,times:l,extendedValues:b}}function K(g){const I=g.getElementsByTagName("trkseg"),C=[],A=[],l=[];for(let g=0;g<I.length;g++){const C=p(I[g],"trkpt");C&&(l.push(C),C.times&&C.times.length&&A.push(C.times))}if(0===l.length)return;const b=l.length>1,c=Object.assign(u(g),J(y(g,"extensions")),{_gpxType:"trk"},A.length?{coordinateProperties:{times:b?A:A[0]}}:{});for(let g=0;g<l.length;g++){const I=l[g];C.push(I.line);for(const[C,A]of Object.entries(I.extendedValues)){let I=c;"heart"===C&&(c.coordinateProperties||(c.coordinateProperties={}),I=c.coordinateProperties),b?(I[C]||(I[C]=l.map((g=>new Array(g.line.length).fill(null)))),I[C][g]=A):I[C]=A}}return{type:"Feature",properties:c,geometry:b?{type:"MultiLineString",coordinates:C}:{type:"LineString",coordinates:C[0]}}}function*X(g){const I=g.getElementsByTagName("trk"),C=g.getElementsByTagName("rte"),A=g.getElementsByTagName("wpt");for(let g=0;g<I.length;g++){const C=K(I[g]);C&&(yield C)}for(let g=0;g<C.length;g++){const I=H(C[g]);I&&(yield I)}for(let g=0;g<A.length;g++)yield(l=A[g],{type:"Feature",properties:Object.assign(u(l),S(l,["sym"])),geometry:{type:"Point",coordinates:k(l).coordinates}});var l}Object.defineProperty(a,"__esModule",{value:!0});const h=[["heartRate","heartRates"],["Cadence","cadences"],["Speed","speeds"],["Watts","watts"]],r=[["TotalTimeSeconds","totalTimeSeconds"],["DistanceMeters","distanceMeters"],["MaximumSpeed","maxSpeed"],["AverageHeartRateBpm","avgHeartRate"],["MaximumHeartRateBpm","maxHeartRate"],["AvgSpeed","avgSpeed"],["AvgWatts","avgWatts"],["MaxWatts","maxWatts"]];function R(g,I){const C=[];for(const[A,l]of I){let I=y(g,A);if(!I){const C=g.getElementsByTagNameNS("http://www.garmin.com/xmlschemas/ActivityExtension/v2",A);C.length&&(I=C[0])}const b=parseFloat(V(I));isNaN(b)||C.push([l,b])}return C}function w(g){const I=V(y(g,"LongitudeDegrees")),C=V(y(g,"LatitudeDegrees"));if(!I.length||!C.length)return null;const A=[parseFloat(I),parseFloat(C)],l=y(g,"AltitudeMeters"),b=y(g,"HeartRateBpm"),c=y(g,"Time");let Z;return l&&(Z=parseFloat(V(l)),isNaN(Z)||A.push(Z)),{coordinates:A,time:c?V(c):null,heartRate:b?parseFloat(V(b)):null,extensions:R(g,h)}}function Y(g,I){const C=g.getElementsByTagName(I),A=[],l=[],b=[];if(C.length<2)return null;const c={extendedProperties:{}};for(let g=0;g<C.length;g++){const I=w(C[g]);if(null!==I){A.push(I.coordinates),I.time&&l.push(I.time),I.heartRate&&b.push(I.heartRate);for(const[A,l]of I.extensions)c.extendedProperties[A]||(c.extendedProperties[A]=Array(C.length).fill(null)),c.extendedProperties[A][g]=l}}return Object.assign(c,{line:A,times:l,heartRates:b})}function v(g){const I=g.getElementsByTagName("Track"),C=[],A=[],l=[],b=[];let c;const Z=function(g){const I={};for(const[C,A]of g)I[C]=A;return I}(R(g,r)),o=y(g,"Name");o&&(Z.name=V(o));for(let g=0;g<I.length;g++)c=Y(I[g],"Trackpoint"),c&&(C.push(c.line),c.times.length&&A.push(c.times),c.heartRates.length&&l.push(c.heartRates),b.push(c.extendedProperties));for(let g=0;g<b.length;g++){const A=b[g];for(const l in A)1===I.length?Z[l]=c.extendedProperties[l]:(Z[l]||(Z[l]=C.map((g=>Array(g.length).fill(null)))),Z[l][g]=A[l])}if(0!==C.length)return(A.length||l.length)&&(Z.coordinateProperties=Object.assign(A.length?{times:1===C.length?A[0]:A}:{},l.length?{heart:1===C.length?l[0]:l}:{})),{type:"Feature",properties:Z,geometry:{type:1===C.length?"LineString":"MultiLineString",coordinates:1===C.length?C[0]:C}}}function*N(g){const I=g.getElementsByTagName("Lap");for(let g=0;g<I.length;g++){const C=v(I[g]);C&&(yield C)}const C=g.getElementsByTagName("Courses");for(let g=0;g<C.length;g++){const I=v(C[g]);I&&(yield I)}}const F=/\s*/g,z=/^\s*|\s*$/g,x=/\s+/;function f(g){if(!g||!g.length)return 0;let I=0;for(let C=0;C<g.length;C++)I=(I<<5)-I+g.charCodeAt(C)|0;return I}function Q(g){return g.replace(F,"").split(",").map(parseFloat)}function L(g){return g.replace(z,"").split(x).map(Q)}function T(g){if(void 0!==g.xml)return g.xml;if(g.tagName){let I=g.tagName;for(let C=0;C<g.attributes.length;C++)I+=g.attributes[C].name+g.attributes[C].value;for(let C=0;C<g.childNodes.length;C++)I+=T(g.childNodes[C]);return I}return"#text"===g.nodeName?(g.nodeValue||g.value||"").trim():"#cdata-section"===g.nodeName?g.nodeValue:""}const D=["Polygon","LineString","Point","Track","gx:Track"];function U(g,I,C){let A=V(y(I,"color"))||"";const l="stroke"==C||"fill"===C?C:C+"-color";"#"===A.substr(0,1)&&(A=A.substr(1)),6===A.length||3===A.length?g[l]=A:8===A.length&&(g[C+"-opacity"]=parseInt(A.substr(0,2),16)/255,g[l]="#"+A.substr(6,2)+A.substr(4,2)+A.substr(2,2))}function M(g,I,C,A){const l=parseFloat(V(y(I,C)));isNaN(l)||(g[A]=l)}function O(g){let I=g.getElementsByTagName("coord");const C=[],A=[];0===I.length&&(I=g.getElementsByTagName("gx:coord"));for(let g=0;g<I.length;g++)C.push(V(I[g]).split(" ").map(parseFloat));const l=g.getElementsByTagName("when");for(let g=0;g<l.length;g++)A.push(V(l[g]));return{coords:C,times:A}}function j(g){let I,C,A,l,b;const c=[],Z=[];if(y(g,"MultiGeometry"))return j(y(g,"MultiGeometry"));if(y(g,"MultiTrack"))return j(y(g,"MultiTrack"));if(y(g,"gx:MultiTrack"))return j(y(g,"gx:MultiTrack"));for(A=0;A<D.length;A++)if(C=g.getElementsByTagName(D[A]),C)for(l=0;l<C.length;l++)if(I=C[l],"Point"===D[A])c.push({type:"Point",coordinates:Q(V(y(I,"coordinates")))});else if("LineString"===D[A])c.push({type:"LineString",coordinates:L(V(y(I,"coordinates")))});else if("Polygon"===D[A]){const g=I.getElementsByTagName("LinearRing"),C=[];for(b=0;b<g.length;b++)C.push(L(V(y(g[b],"coordinates"))));c.push({type:"Polygon",coordinates:C})}else if("Track"===D[A]||"gx:Track"===D[A]){const g=O(I);c.push({type:"LineString",coordinates:g.coords}),g.times.length&&Z.push(g.times)}return{geoms:c,coordTimes:Z}}function P(g,I,C,A){const l=j(g);let b;const c={},Z=V(y(g,"name")),o=V(y(g,"address"));let d=V(y(g,"styleUrl"));const e=V(y(g,"description")),G=y(g,"TimeSpan"),t=y(g,"TimeStamp"),s=y(g,"ExtendedData");let n=y(g,"IconStyle"),m=y(g,"LabelStyle"),W=y(g,"LineStyle"),B=y(g,"PolyStyle");const i=y(g,"visibility");if(Z&&(c.name=Z),o&&(c.address=o),d){"#"!==d[0]&&(d="#"+d),c.styleUrl=d,I[d]&&(c.styleHash=I[d]),C[d]&&(c.styleMapHash=C[d],c.styleHash=I[C[d].normal]);const g=A[c.styleHash];g&&(n||(n=y(g,"IconStyle")),m||(m=y(g,"LabelStyle")),W||(W=y(g,"LineStyle")),B||(B=y(g,"PolyStyle")))}if(e&&(c.description=e),G){const g=V(y(G,"begin")),I=V(y(G,"end"));c.timespan={begin:g,end:I}}if(t&&(c.timestamp=V(y(t,"when"))),n){U(c,n,"icon"),M(c,n,"scale","icon-scale"),M(c,n,"heading","icon-heading");const g=y(n,"hotSpot");if(g){const I=parseFloat(g.getAttribute("x")),C=parseFloat(g.getAttribute("y"));isNaN(I)||isNaN(C)||(c["icon-offset"]=[I,C])}const I=y(n,"Icon");if(I){const g=V(y(I,"href"));g&&(c.icon=g)}}if(m&&(U(c,m,"label"),M(c,m,"scale","label-scale")),W&&(U(c,W,"stroke"),M(c,W,"width","stroke-width")),B){U(c,B,"fill");const g=V(y(B,"fill")),I=V(y(B,"outline"));g&&(c["fill-opacity"]="1"===g?c["fill-opacity"]||1:0),I&&(c["stroke-opacity"]="1"===I?c["stroke-opacity"]||1:0)}if(s){const g=s.getElementsByTagName("Data"),I=s.getElementsByTagName("SimpleData");for(b=0;b<g.length;b++)c[g[b].getAttribute("name")]=V(y(g[b],"value"));for(b=0;b<I.length;b++)c[I[b].getAttribute("name")]=V(I[b])}i&&(c.visibility=V(i)),l.coordTimes.length&&(c.coordinateProperties={times:1===l.coordTimes.length?l.coordTimes[0]:l.coordTimes});const a={type:"Feature",geometry:0===l.geoms.length?null:1===l.geoms.length?l.geoms[0]:{type:"GeometryCollection",geometries:l.geoms},properties:c};return g.getAttribute("id")&&(a.id=g.getAttribute("id")),a}function*E(g){const I={},C={},A={},l=g.getElementsByTagName("Placemark"),b=g.getElementsByTagName("Style"),c=g.getElementsByTagName("StyleMap");for(let g=0;g<b.length;g++){const A=f(T(b[g])).toString(16);I["#"+b[g].getAttribute("id")]=A,C[A]=b[g]}for(let g=0;g<c.length;g++){I["#"+c[g].getAttribute("id")]=f(T(c[g])).toString(16);const C=c[g].getElementsByTagName("Pair"),l={};for(let g=0;g<C.length;g++)l[V(y(C[g],"key"))]=V(y(C[g],"styleUrl"));A["#"+c[g].getAttribute("id")]=l}for(let g=0;g<l.length;g++){const b=P(l[g],I,A,C);b&&(yield b)}}var q=a.gpx=function(g){return{type:"FeatureCollection",features:Array.from(X(g))}},_=a.gpxGen=X,$=a.kml=function(g){return{type:"FeatureCollection",features:Array.from(E(g))}},gg=a.kmlGen=E,Ig=a.tcx=function(g){return{type:"FeatureCollection",features:Array.from(N(g))}},Cg=a.tcxGen=N,Ag=Object.freeze(I({__proto__:null,gpx:q,gpxGen:_,kml:$,kmlGen:gg,tcx:Ig,tcxGen:Cg,default:a},[a]));const lg=["topojson","kml","gpx","tcx","csv","tsv"];class bg{constructor(g,I){this.blankGeoJSON=()=>({type:"FeatureCollection",features:[]}),this._rawData=I,this._format=g;const C={topojson:this.loadTopoJson,kml:this.loadXml,gpx:this.loadXml,tcx:this.loadXml,csv:this.loadCsv,tsv:this.loadCsv};this._conversionFn=C[g]}async convert(){return this._conversionFn?this._conversionFn():new Promise(((g,I)=>I(`No converter exists for ${this._format}`)))}async loadXml(){return Ag[this._format]((new DOMParser).parseFromString(this._rawData,"text/xml"))}async loadCsv(){let g=this.blankGeoJSON(),I={};return"tsv"===this._format&&(I.delimiter="\t"),g=await new Promise(((g,C)=>{W.csv2geojson(this._rawData,I,((I,A)=>I?C(I):g(A)))})),g}async loadTopoJson(){let g={};try{g=JSON.parse(this._rawData)}catch(g){throw"Invalid TopoJson"}let I=this.blankGeoJSON();return"Topology"===g.type&&void 0!==g.objects&&(I={type:"FeatureCollection",features:I.features=Object.keys(g.objects).map((I=>{return C=g,"string"==typeof(A=I)&&(A=C.objects[A]),"GeometryCollection"===A.type?{type:"FeatureCollection",features:A.geometries.map((function(g){return i(C,g)}))}:i(C,A);var C,A})).reduce(((g,I)=>[...g,...I.features]),[])}),I}}var cg=null;try{var Zg="undefined"!=typeof module&&"function"==typeof module.require&&module.require("worker_threads")||"function"==typeof __non_webpack_require__&&__non_webpack_require__("worker_threads")||"function"==typeof require&&require("worker_threads");cg=Zg.Worker}catch(g){}function og(g,I,C){var A=void 0===I?null:I,l=function(g,I){return Buffer.from(g,"base64").toString(I?"utf16":"utf8")}(g,void 0!==C&&C),b=l.indexOf("\n",10)+1,c=l.substring(b)+(A?"//# sourceMappingURL="+A:"");return function(g){return new cg(c,Object.assign({},g,{eval:!0}))}}function dg(g,I,C){var A=void 0===I?null:I,l=function(g,I){var C=atob(g);if(I){for(var A=new Uint8Array(C.length),l=0,b=C.length;l<b;++l)A[l]=C.charCodeAt(l);return String.fromCharCode.apply(null,new Uint16Array(A.buffer))}return C}(g,void 0!==C&&C),b=l.indexOf("\n",10)+1,c=l.substring(b)+(A?"//# sourceMappingURL="+A:""),Z=new Blob([c],{type:"application/javascript"});return URL.createObjectURL(Z)}var eg="[object process]"===Object.prototype.toString.call("undefined"!=typeof process?process:0);var Gg,tg,sg,ng=(Gg="",tg=null,sg=!1,eg?og(Gg,tg,sg):function(g,I,C){var A;return function(l){return A=A||dg(g,I,C),new Worker(A,l)}}(Gg,tg,sg));const mg=()=>Math.random().toString(36).substring(2);class Wg{constructor(g,I){this.initId=mg()+"-"+g,this.worker=new ng,this.handlers=new Map,this.worker.onmessage=g=>{const I=g.data,C=this.handlers.get(I.id),A=this;if(C){if("response"===I.type&&C.res(I.message),"error"===I.type){const g=I.error||new Error(`Unknown error with ${this.subClass}`);C.rej(g)}"init_response"===I.type&&(this._=Object.keys(I.message).map((g=>{const C=typeof I.message[g];return[g,function(){return C?A.exec(g)(...arguments):A.get(g)}]})).reduce(((g,I)=>({...g,[I[0]]:I[1]})),{}),C.res(this._))}},this.worker.postMessage({type:"init",id:this.initId,command:g,message:I})}onLoad(){return new Promise((g=>{void 0===this._?this.handlers.set(this.initId,{res:g,rej:g}):g(this._)}))}exec(g){const I=this;return function(){return new Promise(((C,A)=>{const l=mg()+"-"+g;I.handlers.set(l,{res:C,rej:A}),I.worker.postMessage({type:"exec",id:l,command:g,message:[...arguments]})}))}}get(g){return new Promise(((I,C)=>{const A=mg()+"-"+g;this.handlers.set(A,{res:I,rej:C}),this.worker.postMessage({type:"get",id:A,command:g,message:[]})}))}}const Bg=(g,I)=>{const C=g.url.split("://")[0],A=g.url.replace(new RegExp(`^${C}://`),"");return fetch(A).then((g=>{200==g.status?g.text().then((g=>{let A,l;["kml","tcx","gpx"].indexOf(C)>=0?(A=new bg(C,g),l=A.convert()):(A=new Wg("Converter",[C,g]),l=A.exec("convert")()),l.then((g=>{I(null,g,null,null)})).catch((g=>{I(g)}))})):I(new Error(`Data fetch error: ${g.statusText}`))})).catch((g=>{I(new Error(g))})),{cancel:()=>{}}};g.VectorTextProtocol=Bg,g.addProtocols=g=>{lg.forEach((I=>{g.addProtocol(I,Bg)}))},Object.defineProperty(g,"__esModule",{value:!0})}));
//# sourceMappingURL=maplibregl-vector-text-protocol.min.js.map
